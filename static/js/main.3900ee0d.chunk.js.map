{"version":3,"sources":["lib/getData.ts","components/Chart/Chart.tsx","lib/bot.ts","App.tsx","lib/simulate.ts","serviceWorker.ts","index.tsx"],"names":["toPip","value","IndexChart","_ref","chartData","data","map","dataTick","index","name","concat","close","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","type","stroke","fill","ProfitChart","_ref2","DECISIONS","getDecision","state","currentIndex","buyingIndex","sellingIndex","pastData","changeAtTick","currentTick","buyingTick","isWinning","isLoosing","App","selectedData","sourceData","sourceDataTick","open","high","low","slice","timeInMinutes","_simulate","getBotDecision","tax","profit","undefined","nrOfSellingWithProfit","profitData","forEach","decision","push","buyingValue","sellingProfit","simulate","console","log","filter","tick","style","Chart_IndexChart","Chart_ProfitChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3900ee0d.chunk.js","sourcesContent":["import sourceData from './data.json';\n\ntype SourceDataTick = {\n  \"Date\": string;\n  \"Timestamp\": string;\n  \"Open\": number;\n  \"High\": number;\n  \"Low\": number;\n  \"Close\": number;\n  \"Volume\": number;\n}\n\ntype SourceData = SourceDataTick[]\n\nexport type DataTick = {\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n}\n\nexport type Data = DataTick[]\n\nconst toPip = (value: number) => value * 10000;\n\nexport const getData = () => (sourceData as SourceData).map(sourceDataTick => ({\n  open: toPip(sourceDataTick['Open']),\n  high: toPip(sourceDataTick['High']),\n  low: toPip(sourceDataTick['Low']),\n  close: toPip(sourceDataTick['Close']),\n})) as Data;\n","import React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Area, AreaChart } from 'recharts';\n\nimport { Data } from '../../lib/getData';\n\nexport type ChartProps = {\n  data: Data\n}\n\nexport const IndexChart = ({ data }: ChartProps) => {\n  const chartData = data.map((dataTick, index) => ({\n    name: `${index}`,\n    value: dataTick.close,\n  }))\n\n  return (\n    <AreaChart width={800} height={400} data={chartData}\n      margin={{\n        top: 10, right: 30, left: 0, bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis domain={['dataMin', 'dataMax']} />\n      <Tooltip />\n      <Legend />\n      <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  );\n};\n\nexport type ProfitDataTick = {\n  name: string;\n  value?: number;\n};\n\nexport type ProfitData = ProfitDataTick[];\n\nexport type ProfitChartProps = {\n  data: ProfitData;\n};\n\nexport const ProfitChart = ({ data }: ProfitChartProps) => {\n  return (\n    <AreaChart\n      width={800}\n      height={400}\n      data={data}\n      margin={{\n        top: 10, right: 30, left: 0, bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis domain={['dataMin', 'dataMax']} />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  );\n};\n","import { Data } from \"./getData\";\n\nexport type State = {\n  currentIndex: number;\n  buyingIndex: number | undefined;\n  sellingIndex: number | undefined;\n  pastData: Data;\n}\n\nexport type GetDecisionProps = {\n  state: State;\n}\n\nexport type DECISION = \"BUY\" | \"SELL\" | \"WAIT\";\n\nexport const DECISIONS = {\n  BUY: 'BUY' as 'BUY',\n  SELL: 'SELL' as 'SELL',\n  WAIT: 'WAIT' as 'WAIT',\n};\n\nconst tax = 0.8;\n\nexport const getDecision = ({ state }: GetDecisionProps): DECISION => {\n  const { currentIndex, buyingIndex, sellingIndex, pastData } = state;\n  const changeAtTick = (index: number) => pastData[index].close - pastData[index - 1].close;\n\n  const currentTick = pastData[currentIndex];\n\n  if (buyingIndex) {\n    const buyingTick = pastData[buyingIndex];\n    \n    const isWinning = currentTick.close - buyingTick.close > 3;\n    const isLoosing = currentTick.close - buyingTick.close < -5;\n\n    if (isWinning) {\n      return DECISIONS.SELL;\n    }\n\n    if (isLoosing) {\n      return DECISIONS.SELL;\n    }\n    \n    return DECISIONS.WAIT;\n  } else {\n    if (typeof sellingIndex !== 'undefined' && currentIndex - sellingIndex >= 10) {\n      if (\n        currentIndex > 20 &&\n        changeAtTick(currentIndex) > 0 &&\n        changeAtTick(currentIndex - 1) < -1 &&\n        changeAtTick(currentIndex - 2) < -1 &&\n        changeAtTick(currentIndex - 3) < -1\n      ) {\n        return DECISIONS.BUY;\n      }\n\n      if (\n        currentIndex > 20 &&\n        changeAtTick(currentIndex) > 0 &&\n        changeAtTick(currentIndex - 1) > 0 &&\n        changeAtTick(currentIndex - 2) > 0 &&\n        changeAtTick(currentIndex - 3) > 0 &&\n        changeAtTick(currentIndex - 4) > 0 &&\n        changeAtTick(currentIndex - 5) > 0\n      ) {\n        return DECISIONS.BUY;\n      }\n    }\n\n    if (typeof sellingIndex === 'undefined' && currentIndex > 20) {\n      return DECISIONS.BUY;\n    }\n\n    return DECISIONS.WAIT;\n  }\n};\n","import React from 'react';\nimport { getData, Data } from './lib/getData';\nimport { IndexChart, ProfitChart } from './components/Chart/Chart';\nimport { simulate } from './lib/simulate';\nimport { getDecision } from './lib/bot';\n\nconst App = () => {\n  const data = getData();\n\n  const timeInMinutes = 60 * 24 * 30;\n  const selectedData = data.slice(timeInMinutes * -1);\n  \n  const {profit, nrOfSellingWithProfit, profitData} = simulate({ getBotDecision: getDecision, data: selectedData, tax: 0.8 });\n  console.log('profitData', profitData.filter(tick => !!tick.value));\n  \n  return (\n    <div style={{ margin: 20 }}>\n      <div>Forex Predictions</div>\n      <IndexChart data={selectedData} />\n      <ProfitChart data={profitData} />\n      <div>profit: {profit}</div>\n      <div>nrOfSellingWithProfit: {nrOfSellingWithProfit}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { getDecision, State, DECISIONS } from \"./bot\";\nimport { Data } from \"./getData\";\nimport { ProfitData } from \"../components/Chart/Chart\";\n\nexport type SimulateProps = {\n  getBotDecision: typeof getDecision;\n  data: Data;\n  tax: number\n}\n\nexport type SimulateResult = {\n  profit: number;\n  nrOfSellingWithProfit: number;\n  profitData: ProfitData;\n}\n\nexport const simulate = ({ getBotDecision, data, tax }: SimulateProps): SimulateResult => {\n  let profit: number = 0;\n  let buyingIndex: number | undefined = undefined;\n  let sellingIndex: number | undefined = undefined;\n  let nrOfSellingWithProfit = 0;\n  let profitData: ProfitData = [];\n  \n  data.forEach((dataTick, currentIndex) => {\n    const pastData = data.slice(0, currentIndex + 1);\n    const state: State = {\n      currentIndex,\n      buyingIndex,\n      sellingIndex,\n      pastData,\n    }\n    const decision = getBotDecision({ state });\n\n    if (decision === DECISIONS.BUY) {\n      profitData.push({ name: `${currentIndex}`, value: 0 });\n\n      buyingIndex = currentIndex;\n    } else if (decision === DECISIONS.SELL && buyingIndex) {\n      const buyingValue = data[buyingIndex].close;\n      const sellingValue = data[currentIndex].close;\n      const sellingProfit = (sellingValue - buyingValue) - tax;\n\n      buyingIndex = undefined;\n      sellingIndex = currentIndex;\n      profit = profit + sellingProfit;\n\n      profitData.push({ name: `${currentIndex}`, value: sellingProfit });\n\n      if (sellingProfit > 0) {\n        nrOfSellingWithProfit = nrOfSellingWithProfit + 1;\n      }\n    } else if (decision === DECISIONS.WAIT && buyingIndex) {\n      const buyingValue = data[buyingIndex].close;\n      const sellingValue = data[currentIndex].close;\n      const sellingProfit = (sellingValue - buyingValue) - tax;\n\n      profitData.push({ name: `${currentIndex}`, value: sellingProfit });\n    } else if (decision === DECISIONS.WAIT && !buyingIndex) {\n      profitData.push({ name: `${currentIndex}` });\n    }\n  });\n\n  return {\n    profit, nrOfSellingWithProfit, profitData\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}