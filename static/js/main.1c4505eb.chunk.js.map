{"version":3,"sources":["lib/getData.ts","components/Chart/Chart.tsx","lib/averageIndicatorForData.ts","lib/slopeIndicator.ts","lib/bot.ts","lib/inverseArray.ts","App.tsx","lib/simulate.ts","serviceWorker.ts","index.tsx"],"names":["toPip","value","IndexChart","_ref","chartData","data","map","dataTick","index","name","close","react_default","a","createElement","es6","width","height","margin","top","right","left","bottom","strokeDasharray","type","dataKey","domain","stroke","fill","ProfitChart","_ref2","IndicatorChart","_ref3","averageIndicatorForData","reduce","sum","n","length","averageSlopeIndicatorForData","recentData","pastData","slopeIndicator","DECISIONS","getDecision","state","currentIndex","buyingIndex","sellingIndex","averageSlope","_d","pastIndex","slice","invertedSlopeOfAverageSlope","array","invertedArray","push","inverseArray","App","selectedData","sourceData","sourceDataTick","open","high","low","timeInSeconds","_simulate","getBotDecision","tax","profit","undefined","nrOfWins","nrOfLosses","profitData","forEach","decision","buyingValue","sellingProfit","simulate","averageChartData","averageSlopeChartData","slopeOfAverageSlopeChartData","style","Chart_IndexChart","Chart_IndicatorChart","Chart_ProfitChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c4505eb.chunk.js","sourcesContent":["import sourceData from './data.json';\n\ntype SourceDataTick = {\n  \"Date\": string;\n  \"Timestamp\": string;\n  \"Open\": number;\n  \"High\": number;\n  \"Low\": number;\n  \"Close\": number;\n  \"Volume\": number;\n}\n\ntype SourceData = SourceDataTick[]\n\nexport type DataTick = {\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n}\n\nexport type Data = DataTick[]\n\nconst toPip = (value: number) => value * 10000;\n\nexport const getData = () => (sourceData as SourceData).map(sourceDataTick => ({\n  open: toPip(sourceDataTick['Open']),\n  high: toPip(sourceDataTick['High']),\n  low: toPip(sourceDataTick['Low']),\n  close: toPip(sourceDataTick['Close']),\n})) as Data;\n","import React from 'react';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, Legend, Area, AreaChart } from 'recharts';\n\nimport { Data } from '../../lib/getData';\n\nexport type ChartProps = {\n  data: Data\n}\n\nexport const IndexChart = ({ data }: ChartProps) => {\n  const chartData = data.map((dataTick, index) => ({\n    name: index,\n    value: dataTick.close,\n  }))\n\n  return (\n    <AreaChart width={800} height={400} data={chartData}\n      margin={{\n        top: 10, right: 30, left: 0, bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis type=\"number\" dataKey=\"name\" />\n      <YAxis domain={['dataMin', 'dataMax']} />\n      <Tooltip />\n      <Legend />\n      <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  );\n};\n\nexport type ChartDataTick = {\n  name: number;\n  value?: number;\n};\n\nexport type ChartData = ChartDataTick[];\n\nexport type ProfitChartProps = {\n  data: ChartData;\n};\n\nexport const ProfitChart = ({ data }: ProfitChartProps) => {\n  return (\n    <AreaChart\n      width={800}\n      height={400}\n      data={data}\n      margin={{\n        top: 10, right: 30, left: 0, bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis type=\"number\" dataKey=\"name\" />\n      <YAxis domain={['dataMin', 'dataMax']} />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  );\n};\n\nexport type IndicatorChartProps = {\n  data: ChartData;\n};\n\nexport const IndicatorChart = ({ data }: IndicatorChartProps) => {\n  return (\n    <AreaChart width={800} height={400} data={data}\n      margin={{\n        top: 10, right: 30, left: 0, bottom: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis type=\"number\" dataKey=\"name\" />\n      <YAxis domain={['dataMin', 'dataMax']} />\n      <Tooltip />\n      <Legend />\n      <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  );\n};\n","import { Data } from \"./getData\";\n\nexport function averageIndicatorForData(data: Data) {\n  const sum = data.reduce((sum, n) => sum + n.close, 0);\n\n  return sum / data.length;\n}\n\nexport function averageSlopeIndicatorForData(recentData: Data, pastData: Data) {\n  const recentAverage = averageIndicatorForData(recentData);\n  const pastAverage = averageIndicatorForData(pastData);\n  return recentAverage - pastAverage;\n}\n","export function slopeIndicator(data: number[]) {\n  return data.map((value, index) => index > 0 ? value - data[index - 1] : 0);\n}\n","import { Data } from \"./getData\";\nimport { averageSlopeIndicatorForData } from \"./averageIndicatorForData\";\nimport { inverseArray } from \"./inverseArray\";\nimport { slopeIndicator } from \"./slopeIndicator\";\n\nexport type State = {\n  currentIndex: number;\n  buyingIndex: number | undefined;\n  sellingIndex: number | undefined;\n  pastData: Data;\n}\n\nexport type GetDecisionProps = {\n  state: State;\n}\n\nexport type DECISION = \"BUY\" | \"SELL\" | \"WAIT\";\n\nexport const DECISIONS = {\n  BUY: 'BUY' as 'BUY',\n  SELL: 'SELL' as 'SELL',\n  WAIT: 'WAIT' as 'WAIT',\n};\n\nconst tax = 0.8;\n\nexport const getDecision = ({ state }: GetDecisionProps): DECISION => {\n  const { currentIndex, buyingIndex, sellingIndex, pastData } = state;\n  \n  const averageSlope = pastData.map((_d, index) => {\n    const interval = 30;\n    const pastIndex = index - interval;\n    return averageSlopeIndicatorForData(\n      pastData.slice(index < interval ? 0 : index - interval, index + 1),\n      pastData.slice(pastIndex < interval ? 0 : pastIndex - interval, pastIndex + 1)\n    );\n  });\n\n  const slopeOfAverageSlope = slopeIndicator(averageSlope);\n  const invertedSlopeOfAverageSlope = inverseArray(slopeOfAverageSlope);\n\n  // SELLING\n  if (buyingIndex) {\n    const buyingTick = pastData[buyingIndex];\n\n    // SELL if trend is changing\n    if (invertedSlopeOfAverageSlope[0] < 0) {\n      return DECISIONS.SELL;\n    }\n    \n    return DECISIONS.WAIT;\n\n\n  // BUYING\n  } else {\n    if (typeof sellingIndex !== 'undefined' && currentIndex - sellingIndex >= 15) {\n      if (\n        averageSlope[currentIndex] > 0 &&\n        invertedSlopeOfAverageSlope[0] > 0 &&\n        invertedSlopeOfAverageSlope[1] > 0 &&\n        invertedSlopeOfAverageSlope[2] > 0 &&\n        invertedSlopeOfAverageSlope[3] > 0 &&\n        invertedSlopeOfAverageSlope[4] > 0 &&\n        invertedSlopeOfAverageSlope[5] > 0 &&\n        invertedSlopeOfAverageSlope[6] > 0 &&\n        invertedSlopeOfAverageSlope[7] > 0 &&\n        invertedSlopeOfAverageSlope[8] > 0 &&\n        invertedSlopeOfAverageSlope[9] > 0 &&\n        invertedSlopeOfAverageSlope[10] > 0 &&\n        invertedSlopeOfAverageSlope[11] > 0 &&\n        invertedSlopeOfAverageSlope[12] > 0 &&\n        invertedSlopeOfAverageSlope[13] > 0\n      ) {\n        return DECISIONS.BUY;\n      }\n    }\n\n    if (typeof sellingIndex === 'undefined' && currentIndex > 20) {\n      return DECISIONS.BUY;\n    }\n\n    return DECISIONS.WAIT;\n  }\n};\n","export function inverseArray<P>(array: P[]) {\n  let invertedArray = [];\n  for (let index = array.length - 1; index >= 0; index--) {\n    invertedArray.push(array[index]);\n  }\n  return invertedArray;\n}\n","import React from 'react';\nimport { getData, Data } from './lib/getData';\nimport { IndexChart, ProfitChart, ChartData, IndicatorChart } from './components/Chart/Chart';\nimport { simulate } from './lib/simulate';\nimport { getDecision } from './lib/bot';\nimport { averageIndicatorForData, averageSlopeIndicatorForData } from './lib/averageIndicatorForData';\nimport { slopeIndicator } from './lib/slopeIndicator';\n\nconst App = () => {\n  const data = getData();\n\n  const timeInSeconds = 60 * 60 * 12;\n  const selectedData = data.slice(timeInSeconds * -1);\n  \n  const {profit, nrOfWins, nrOfLosses, profitData} = simulate({ getBotDecision: getDecision, data: selectedData, tax: 0.8 });\n  \n  const average = selectedData.map((_d, index) => {\n    const interval = 30;\n    const averageSample = selectedData.slice(index < interval ? 0 : index - interval, index + 1);\n    return averageIndicatorForData(averageSample);\n  });\n\n  const averageChartData: ChartData = average.map((value, index) => ({\n    name: index,\n    value,\n  }));\n\n  const averageSlope = selectedData.map((_d, index) => {\n    const interval = 30;\n    const pastIndex = index - interval;\n    const currentAverageSample = selectedData.slice(index < interval ? 0 : index - interval, index + 1);\n    const pastAverageSample = selectedData.slice(pastIndex < interval ? 0 : pastIndex - interval, pastIndex + 1);\n    return averageSlopeIndicatorForData(currentAverageSample, pastAverageSample);\n  });\n\n  const averageSlopeChartData: ChartData = averageSlope.map((value, index) => ({\n    name: index,\n    value,\n  }));\n\n  const slopeOfAverageSlope = slopeIndicator(averageSlope)\n  const slopeOfAverageSlopeChartData = slopeOfAverageSlope.map((value, index) => ({\n    name: index,\n    value,\n  }))\n  \n  return (\n    <div style={{ margin: 20 }}>\n      <div>Forex Predictions</div>\n      <div>Index:</div>\n      <IndexChart data={selectedData} />\n      <div>Averge (interval: 30sec):</div>\n      <IndicatorChart data={averageChartData} />\n      <div>Averge Slope (interval: 30sec):</div>\n      <IndicatorChart data={averageSlopeChartData} />\n      <div>Slope of Averge Slope:</div>\n      <IndicatorChart data={slopeOfAverageSlopeChartData} />\n      <ProfitChart data={profitData} />\n      <div>selected data time: {selectedData.length / 60}min.</div>\n      <div>profit: {profit}</div>\n      <div>nrOfWins: {nrOfWins}</div>\n      <div>nrOfLosses: {nrOfLosses}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { getDecision, State, DECISIONS } from \"./bot\";\nimport { Data } from \"./getData\";\nimport { ChartData } from \"../components/Chart/Chart\";\n\nexport type SimulateProps = {\n  getBotDecision: typeof getDecision;\n  data: Data;\n  tax: number\n}\n\nexport type SimulateResult = {\n  profit: number;\n  nrOfWins: number;\n  nrOfLosses: number;\n  profitData: ChartData;\n}\n\nexport const simulate = ({ getBotDecision, data, tax }: SimulateProps): SimulateResult => {\n  let profit: number = 0;\n  let buyingIndex: number | undefined = undefined;\n  let sellingIndex: number | undefined = undefined;\n  let nrOfWins = 0;\n  let nrOfLosses = 0;\n  let profitData: ChartData = [];\n  \n  data.forEach((dataTick, currentIndex) => {\n    const pastData = data.slice(0, currentIndex + 1);\n    const state: State = {\n      currentIndex,\n      buyingIndex,\n      sellingIndex,\n      pastData,\n    }\n    const decision = getBotDecision({ state });\n\n    if (decision === DECISIONS.BUY) {\n      profitData.push({ name: currentIndex, value: 0 });\n\n      buyingIndex = currentIndex;\n    } else if (decision === DECISIONS.SELL && buyingIndex) {\n      const buyingValue = data[buyingIndex].close;\n      const sellingValue = data[currentIndex].close;\n      const sellingProfit = (sellingValue - buyingValue) - tax;\n\n      buyingIndex = undefined;\n      sellingIndex = currentIndex;\n      profit = profit + sellingProfit;\n\n      profitData.push({ name: currentIndex, value: sellingProfit });\n\n      if (sellingProfit >= 0) {\n        nrOfWins = nrOfWins + 1;\n      } else {\n        nrOfLosses = nrOfLosses + 1;\n      }\n    } else if (decision === DECISIONS.WAIT && buyingIndex) {\n      const buyingValue = data[buyingIndex].close;\n      const sellingValue = data[currentIndex].close;\n      const sellingProfit = (sellingValue - buyingValue) - tax;\n\n      profitData.push({ name: currentIndex, value: sellingProfit });\n    } else if (decision === DECISIONS.WAIT && !buyingIndex) {\n      profitData.push({ name: currentIndex });\n    }\n  });\n\n  return {\n    profit, nrOfWins, nrOfLosses, profitData\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}